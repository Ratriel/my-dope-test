{"version":3,"sources":["../../src/components/Button.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["colors","useStyles","makeStyles","button","margin","padding","borderRadius","fontfamily","fontweight","color","backgroundColor","ghost","border","borderColor","NormalButton","props","classes","variant","lable","disabled","onClick","rest","React","className","ExampleComponent","text","count","setCount","styles","style","App","ReactDOM","render","document","getElementById"],"mappings":"iUAUMA,EAAS,UAATA,EAAS,UAATA,EAAS,UAATA,EAAS,UAATA,EAAS,UAATA,EAAS,UAATA,EAAS,yBAATA,EAAS,UAoCTC,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,OADM,OAENC,QAFM,sBAGNC,aAHM,MAINC,WAJM,OAKNC,WALM,OAMNC,MAAOT,EACPU,gBAAiBV,EACjB,UAAW,CACTU,gBAAiBV,GAEnB,WAAY,CAAEU,gBAAiBV,GAC/B,aAAc,CACZS,MAAOT,EACPU,gBAAiBV,IAGrBW,MAAO,CACLP,OADK,OAELC,QAFK,sBAGLC,aAHK,MAILG,MAAOT,EACPO,WALK,OAMLC,WANK,OAOLE,gBAAiBV,EACjBY,OAAQ,aAAaZ,EACrB,UAAW,CACTU,gBAAiBV,EACjBS,MAAOT,EACPa,YAAab,GAEf,WAAY,CACVU,gBAAiBV,EACjBS,MAAOT,EACPa,YAAab,GAEf,aAAc,CACZS,MAAOT,EACPU,gBAAiBV,MAKjBc,EAAe,SAACC,GACpB,IAAMC,EAAUf,IACRgB,EAA+CF,EAAvD,QAAiBG,EAAsCH,EAAvD,MAAwBI,EAA+BJ,EAAvD,SAAkCK,EAAqBL,EAAvD,QAA8CM,E,oIAA9C,MACA,gBAAIJ,EAEAK,qCACEC,UAAWP,EAAQL,MACnBQ,SAAUA,EACVC,QAASA,GAHXE,GADF,GAYEA,qCACEC,UAAWP,EAAQb,OACnBgB,SAAUA,EACVC,QAASA,GAHXE,GADF,I,WCjGSE,EAAmB,SAAC,G,IAAEC,SACjC,EAA0BH,mBAA1B,GAAOI,EAAP,KAAcC,EAAd,KACA,OACE,mCACE,+BAAKJ,UAAWK,GAAhB,sBADF,GAGEN,sDAHF,KAIE,kCAAQO,MAAO,CAAEzB,OAAQ,QAAUgB,QAAS,kBAAMO,EAASD,EAAf,KAJ9C,kBAOE,2BAAcR,MAAO,WCTZY,G,MAJH,WACV,OAAO,kBAAC,EAAD,CAAkBL,KAAK,gDCAhCM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2e3aa5f2.chunk.js","sourcesContent":["import { Button, makeStyles } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nexport interface IButton {\r\n  variant?: string\r\n  lable: string\r\n  onClick?: () => void\r\n  disabled?: boolean\r\n}\r\n\r\nconst colors = {\r\n  //buttons\r\n  $ctaHoverButton: '#a70303',\r\n  $ctaPressedButton: '#650808',\r\n  $lightPink: '#ebebeb',\r\n  $brownGrey: '#a4a4a4',\r\n  $ghostButtonColor: '#d52929',\r\n  $rustyRed: '#c81414',\r\n  $ghostHoverText: 'rgba(200, 20, 20, 0.1)',\r\n  $brownishGrey: '#5f5f5f',\r\n  $white: '#ffffff',\r\n  $azure: '#00aeef',\r\n  $azure2: 'rgba(0, 174, 239, 0.2)',\r\n  $azureCheckBoxHover: '#0091c7',\r\n  $warning: '#f07820',\r\n  $black: '#232323',\r\n  $purplishGrey: '#525152',\r\n  $inputBackGround: '#f7f7f7',\r\n\r\n  //chips\r\n  $purplishgrey: '#525152',\r\n  $boxShadow: '0,0,0',\r\n\r\n  //dropdowns\r\n  $dropDownFontColor: '#4c4b46',\r\n\r\n  //Peer section\r\n  $successMessage: '#d8e4cc',\r\n  $infoMessage: '#ccd3f5',\r\n  $warningMessage: '#fbeece',\r\n  $dangerMessage: '#e6bab9',\r\n\r\n  // Stepper Hover\r\n  $stepperHoverBox: 'rgba(35, 35, 35, 0.2)'\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  button: {\r\n    margin: '10px',\r\n    padding: '10px 20px 10px 20px',\r\n    borderRadius: '5px',\r\n    fontfamily: 'Lato',\r\n    fontweight: 'bold',\r\n    color: colors.$white,\r\n    backgroundColor: colors.$rustyRed,\r\n    '&:hover': {\r\n      backgroundColor: colors.$ctaHoverButton\r\n    },\r\n    '&:active': { backgroundColor: colors.$ctaPressedButton },\r\n    '&:disabled': {\r\n      color: colors.$brownGrey,\r\n      backgroundColor: colors.$lightPink\r\n    }\r\n  },\r\n  ghost: {\r\n    margin: '10xp',\r\n    padding: '10px 20px 10px 20px',\r\n    borderRadius: '5px',\r\n    color: colors.$rustyRed,\r\n    fontfamily: 'Lato',\r\n    fontweight: 'bold',\r\n    backgroundColor: colors.$white,\r\n    border: `solid 1px ${colors.$ghostButtonColor}`,\r\n    '&:hover': {\r\n      backgroundColor: colors.$ghostHoverText,\r\n      color: colors.$ctaHoverButton,\r\n      borderColor: colors.$ctaHoverButton\r\n    },\r\n    '&:active': {\r\n      backgroundColor: colors.$white,\r\n      color: colors.$ctaPressedButton,\r\n      borderColor: colors.$ctaPressedButton\r\n    },\r\n    '&:disabled': {\r\n      color: colors.$brownGrey,\r\n      backgroundColor: colors.$lightPink\r\n    }\r\n  }\r\n})\r\n\r\nconst NormalButton = (props: IButton) => {\r\n  const classes = useStyles()\r\n  const { variant, lable, disabled, onClick, ...rest } = props\r\n  if (variant === 'ghost') {\r\n    return (\r\n      <Button\r\n        className={classes.ghost}\r\n        disabled={disabled}\r\n        onClick={onClick}\r\n        {...rest}\r\n      >\r\n        {lable}\r\n      </Button>\r\n    )\r\n  } else {\r\n    return (\r\n      <Button\r\n        className={classes.button}\r\n        disabled={disabled}\r\n        onClick={onClick}\r\n        {...rest}\r\n      >\r\n        {lable}\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NormalButton\r\n","import * as React from 'react'\nimport NormalButton from './components/Button'\nimport styles from './styles.module.css'\n\ninterface Props {\n  text: string\n}\n\nexport const ExampleComponent = ({ text }: Props) => {\n  const [count, setCount] = React.useState<number>(0)\n  return (\n    <div>\n      <div className={styles.test}>Example Component: {text}</div>\n\n      <div>Testing State {count} </div>\n      <button style={{ margin: '20px' }} onClick={() => setCount(count + 1)}>\n        Increase Count\n      </button>\n      <NormalButton lable={'test'} />\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { ExampleComponent } from 'my-dope-test'\nimport 'my-dope-test/dist/index.css'\n\nconst App = () => {\n  return <ExampleComponent text=\"Create React Library Example ðŸ˜„\" />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}